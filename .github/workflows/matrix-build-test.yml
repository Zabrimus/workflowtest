name: Matrix Build VDRSternELEC

on:
  workflow_call:
    inputs:
      target:
        description: "build"
        type: string
        required: true
      defaulttarget:
        description: "Default targets (used by target: all)"
        type: string
        required: true
      addons:
        description: "addons. Use '-' if no addon shall be build"
        type: string
        required: true
      extras:
        description: "extras. Use '-' if no parameter extra be used"
        type: string
        required: true
      extraparameter:
        description: "extra parameter. Use '-' if no parameter shall be used"
        type: string
        required: true

  workflow_dispatch:
    inputs:
      target:
        description: "build"
        default: CoreELEC-22-no
        required: true
        type: choice
        options:
          - all
          - CoreELEC all
          - LibreELEC all
          - CoreELEC-20-ng
          - CoreELEC-20-ne
          - CoreELEC-21-ng
          - CoreELEC-21-ne
          - CoreELEC-22-no
          - LibreELEC-12-aarch64-AMLGX
          - LibreELEC-12-aarch64-Allwinner-H6
          - LibreELEC-12-aarch64-Allwinner-A64
          - LibreELEC-12-arm-Allwinner-R40
          - LibreELEC-12-arm-Allwinner-H3
          - LibreELEC-12-aarch64-Allwinner-H5
          - LibreELEC-12-aarch64-Rockchip-RK3399
          - LibreELEC-12-arm-Rockchip-RK3288
          - LibreELEC-12-aarch64-Rockchip-RK3328
          - LibreELEC-12-aarch64-RPi-RPi4
          - LibreELEC-12-aarch64-RPi-RPi5
          - LibreELEC-12-x86_64-Generic
          - LibreELEC-12-x86_64-GenericLegacy
          - LibreELEC-13-aarch64-AMLGX
          - LibreELEC-13-aarch64-Allwinner-H6
          - LibreELEC-13-aarch64-Allwinner-A64
          - LibreELEC-13-arm-Allwinner-R40
          - LibreELEC-13-arm-Allwinner-H3
          - LibreELEC-13-aarch64-Allwinner-H5
          - LibreELEC-13-aarch64-Rockchip-RK3399
          - LibreELEC-13-arm-Rockchip-RK3288
          - LibreELEC-13-aarch64-Rockchip-RK3328
          - LibreELEC-13-aarch64-RPi-RPi4
          - LibreELEC-13-aarch64-RPi-RPi5
          - LibreELEC-13-x86_64-Generic
          - LibreELEC-13-x86_64-GenericLegacy
          - LibreELEC-13-aarch64-Rockchip-RK356x
          - LibreELEC-13-aarch64-Rockchip-RK3576
          - LibreELEC-13-aarch64-Rockchip-RK3588
      defaulttarget:
        description: "Default targets (used by target: all)"
        default: "CoreELEC-20-ng CoreELEC-20-ne CoreELEC-21-ng CoreELEC-21-ne CoreELEC-22-no LibreELEC-12-aarch64-AMLGX LibreELEC-12-aarch64-Allwinner-H6 LibreELEC-12-aarch64-Allwinner-A64 LibreELEC-12-arm-Allwinner-R40 LibreELEC-12-arm-Allwinner-H3 LibreELEC-12-aarch64-Allwinner-H5 LibreELEC-12-aarch64-Rockchip-RK3399 LibreELEC-12-arm-Rockchip-RK3288 LibreELEC-12-aarch64-Rockchip-RK3328 LibreELEC-12-aarch64-RPi-RPi4 LibreELEC-12-aarch64-RPi-RPi5 LibreELEC-13-aarch64-AMLGX LibreELEC-13-aarch64-Allwinner-H6 LibreELEC-13-aarch64-Allwinner-A64 LibreELEC-13-arm-Allwinner-R40 LibreELEC-13-arm-Allwinner-H3 LibreELEC-13-aarch64-Allwinner-H5 LibreELEC-13-aarch64-Rockchip-RK3399 LibreELEC-13-arm-Rockchip-RK3288 LibreELEC-13-aarch64-Rockchip-RK3328 LibreELEC-13-aarch64-RPi-RPi4 LibreELEC-13-aarch64-RPi-RPi5 LibreELEC-13-aarch64-Rockchip-RK356x LibreELEC-13-aarch64-Rockchip-RK3576 LibreELEC-13-aarch64-Rockchip-RK3588"
        type: string
      addons:
        description: "addons. Use '-' if no addon shall be build"
        default: dvb-latest
        type: string
      extras:
        description: "extras. Use '-' if no parameter extra be used"
        default: easyvdr,channellogos,remotetranscode,cefbrowser
        type: string
      extraparameter:
        description: "extra parameter. Use '-' if no parameter shall be used"
        default: '-releaseonly'
        type: string

jobs:
  prepare-matrix:
    runs-on: ubuntu-24.04
    outputs:
        matrixx86: ${{ steps.setmatrix.outputs.matrixx86 }}
        matrixarm: ${{ steps.setmatrix.outputs.matrixarm }}
    steps:
      - name: Set Dynamic Matrix
        id: setmatrix
        shell: bash
        run: |
          ALL_DEFAULT="${{ inputs.defaulttarget }}"
          
          JSONX86="{\"include\":["
          JSONARM="{\"include\":["

          if [[ "${{ inputs.target }}" == "all" ]] || [[ "${{ inputs.target }}" == "" ]]; then
              for i in $ALL_DEFAULT; do
                  if [[ "$i" == CoreELEC* ]]; then
                      BUILDX86="$BUILDX86 $i"
                  elif [[ "$i" == *x86_64* ]]; then
                      BUILDX86="$BUILDX86 $i"
                  else
                      BUILDARM="$BUILDARM $i"
                  fi
              done
          elif [[ "${{ inputs.target }}" == "CoreELEC all" ]]; then
              for i in $ALL_DEFAULT; do
                  if [[ "$i" == CoreELEC* ]]; then
                      BUILDX86="$BUILDX86 $i"
                  fi
              done
          elif [[ "${{ inputs.target }}" == "LibreELEC all" ]]; then
              for i in $ALL_DEFAULT; do
                  if [[ "$i" == LibreELEC* ]]; then
                      if [[ "$i" == *x86_64* ]]; then
                          BUILDX86="$BUILDX86 $i"
                      else
                          BUILDARM="$BUILDARM $i"
                      fi
                  fi
              done
          else
              if [[ "${{ inputs.target }}" == CoreELEC* ]]; then
                  BUILDX86="$BUILDX86 ${{ inputs.target }}"
              elif [[ "${{ inputs.target }}" == *x86_64* ]]; then
                  BUILDX86="$BUILDX86 ${{ inputs.target }}"
              else
                  BUILDARM="$BUILDARM ${{ inputs.target }}"
              fi
          fi
          
          if [ -n ${BUILDX86} ]; then
            echo "jooaaa"
          fi
          
          echo "==> ${BUILDX86}"
                    
          #if [ ! -n ${BUILDX86} ]; then
              echo "Build x86"
              for i in $BUILDX86; do
                JSONX86="${JSONX86} {\"run\":\"$i\"},"
              done

              JSONX86="${JSONX86} ]}"
              echo "matrixx86=${JSONX86}" >> "$GITHUB_OUTPUT"
              echo "Matrix X86: ${JSONX86}"
          #fi
          
          echo "Teste Matrix y: ${BUILDARM}"
          if [ ! -n ${BUILDARM} ]; then
              echo "Build arn"
              for i in $BUILDARM; do
                JSONARM="${JSONARM} {\"run\":\"$i\"},"
              done
          
              JSONARM="${JSONARM} ]}"
              echo "matrixarm=${JSONARM}" >> "$GITHUB_OUTPUT"
              echo "Matrix arm: ${JSONARM}"
          fi

  build-all-x86:
    if: startsWith(needs.prepare-matrix.outputs.matrixx86, '{')
    needs: [ prepare-matrix ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrixx86) }}
    uses: ./.github/workflows/build-subworkflow.yml
    with:
      runner: ubuntu-24.04
    secrets: inherit

  build-all-arm:
    if: startsWith(needs.prepare-matrix.outputs.matrixarm, '{')
    needs: [ prepare-matrix ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrixarm) }}
    uses: ./.github/workflows/build-subworkflow.yml
    with:
      runner: ubuntu-22.04-arm
    secrets: inherit

