name: Test Summary

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      CURRENT_RELEASE_TAG: ${{ steps.create_release_tag.outputs.CURRENT_RELEASE_TAG }}
    permissions:
      actions: write
      contents: read
    steps:
      - uses: oprypin/find-latest-tag@v1
        with:
          repository:  ${{ github.repository }}
          releases-only: false
        id: current_release_tag

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: create release tag file
        id: create_release_tag
        shell: bash
        run: |
          CURRENT_TAG=${{ steps.current_release_tag.outputs.tag }}
          CURRENT_TAG=$(echo $CURRENT_TAG | sed -e "s/[[:space:]]*(.*$//")
          
          if [[ ! ${CURRENT_TAG} =~ ^${{ steps.date.outputs.date }} ]]; then
            TAG="${{ steps.date.outputs.date }}.1"
          else
            if [[ "${CURRENT_TAG}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\.[0-9]+$ ]]; then
              TAG=$(echo "${CURRENT_TAG}" | perl -pe 's/(\d+)(?!.*\d+)/$1+1/e')
            else
              TAG="${{ steps.date.outputs.date }}.1"
            fi
          fi

          echo "CURRENT_RELEASE_TAG=${TAG}" >> "$GITHUB_OUTPUT"

  create-release:
    needs: [ prepare ]
    runs-on: ubuntu-24.04
    if: ${{ always() }}

    steps:
      - name: Create files
        run: |
            mkdir -p build-summary
            echo "Summary 1" > build-summary/build-summary-1
            echo "Summary 2" > build-summary/build-summary-2
          
            mkdir -p build-artifacts
            echo "Artefact 1" > build-artifacts/build-artifacts-1.zip
            echo "Artefact 2" > build-artifacts/build-artifacts-2.zip

            # don't create addon
            # build-addon
            # build-addon-*

            mkdir -p build-cef
            echo "Cef 1" > build-cef/build-cef-1.zip
            echo "Cef 2" > build-cef/build-cef-2.zip
          
            mkdir -p build-artifacts/CoreELEC/target
            echo "VDR 1" > build-artifacts/CoreELEC/target/VDR-1.zip
            echo "VDR 2" > build-artifacts/CoreELEC/target/VDR-2.zip

      - name: Create release and upload files
        shell: bash
        run: |
          echo "-------------------------------"
          echo "List build summaries...."
          echo "-------------------------------"
          
          if [ -d build-summary ]; then 
            ls -R build-summary
          else
            echo "Directory build-summary does not exists"
          fi
          
          echo "-------------------------------"
          echo "List build artifacts...."
          echo "-------------------------------"

          if [ -d build-artifacts ]; then 
            ls -R build-artifacts
          else
            echo "Directory build-artifacts does not exists"
          fi

          echo "-------------------------------"
          echo "List cef...."
          echo "-------------------------------"

          if [ -d build-cef ]; then 
            ls -R build-cef
          else
            echo "Directory build-cef does not exists"          
          fi

          echo "-------------------------------"
          echo "List addons...."
          echo "-------------------------------"

          if [ -d build-addon ]; then 
            ls -R build-addon
          else
            echo "Directory build-addon does not exists"          
          fi

          echo "-------------------------------"
          echo "Create Release notes..."
          echo "-------------------------------"
        
          VREV=$(git ls-remote https://github.com/${{ github.repository }} | head -1 | sed "s/HEAD//" | cut -c 1-7)
          echo "VDRSternELEC: [master@${VREV}](https://github.com/${{ github.repository }}/tree/${VREV})" >> release_notes
          echo "" >> release_notes
          
          echo "----------------------------------------------------------------------------" >> release_notes
          
          echo "| Status  | Distro | Project | Device | Revision |" >> release_notes
          echo "| ------- | ------ | ------- | ------ | -------- |" >> release_notes         

          cat build-summary/build-summary* >> release_notes || true
          
          cat release_notes
          
          echo "-------------------------------"
          echo "Create Release..."
          echo "-------------------------------"

          # create release
          gh release create "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" -R ${{ github.repository }} -F release_notes --title "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }} (${{ inputs.target }})" --draft
          
          echo "-------------------------------"
          echo "Upload cef..."
          echo "-------------------------------"

          # upload cef files
          for i in $(ls build-cef/*.zip || echo "notfound"); do
              if [ ! "$i" == "notfound" ]; then 
                  echo "Upload $i in release tag ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}"
                  gh release upload "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" $i --clobber -R ${{ github.repository }} || true
              fi
          done
          
          echo "-------------------------------"
          echo "Upload addons..."
          echo "-------------------------------"
          
          # upload addon files
          for i in $(ls build-addon/CoreELEC/target/addons/CoreELEC*zip || echo "notfound"); do
              if [ ! "$i" == "notfound" ]; then
                  echo "Upload $i in release tag ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}"
                  gh release upload "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" $i --clobber -R ${{ github.repository }} || true
              fi
          done

          for i in $(ls build-addon/LibreELEC.tv/target/addons/LibreELEC*zip || echo "notfound"); do
              if [ ! "$i" == "notfound" ]; then
                  echo "Upload $i in release tag ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}"
                  gh release upload "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" $i --clobber -R ${{ github.repository }} || true
              fi
          done
          
          echo "-------------------------------"
          echo "Upload release..."
          echo "-------------------------------"
          
          # upload release files
          for i in $(ls build-artifacts/CoreELEC/target/VDR* || echo "notfound"); do
              if [ ! "$i" == "notfound" ]; then
                  echo "Upload $i in release tag ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}"
                  gh release upload "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" $i --clobber -R ${{ github.repository }} || true
              fi
          done
          
          for i in $(ls build-artifacts/LibreELEC.tv/target/VDR* || echo "notfound"); do
              if [ ! "$i" == "notfound" ]; then
                  echo "Upload $i in release tag ${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}"
                  gh release upload "${{ needs.prepare.outputs.CURRENT_RELEASE_TAG }}" $i --clobber -R ${{ github.repository }} || true
              fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


#  delete-old-releases:
#    needs: [create-release]
#    name: delete-old-releases
#    runs-on: ubuntu-20.04
#    if: ${{ always() }}
#    steps:
#      - uses: dev-drprasad/delete-older-releases@v0.2.0
#        with:
#          repo: ${{ github.repository }}
#          keep_latest: 8
